{
 "info": {
  "description": "A homogeneous material with a definite composition",
  "title": "FHIR R4 Substance Resource",
  "version": "r4"
 },
 "openapi": "3.0.1",
 "servers": [
  {
   "url": "/fhir/r4"
  }
 ],
 "components": {
  "schemas": {
   "MedicinalProductIngredient.specifiedSubstance": {
    "description": "",
    "type": "object",
    "properties": {
     "code": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "The specified substance"
     },
     "confidentiality": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Confidentiality level of the specified substance as the ingredient"
     },
     "group": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "The group of specified substance, e.g. group 1 to 4"
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "strength": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/MedicinalProductIngredient.specifiedSubstance.strength"
      },
      "description": "Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product"
     }
    },
    "required": [
     "id"
    ]
   },
   "MedicinalProductIngredient.specifiedSubstance.strength": {
    "description": "",
    "type": "object",
    "properties": {
     "concentration": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Ratio"
       }
      ],
      "description": "The strength per unitary volume (or mass)"
     },
     "concentrationLowLimit": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Ratio"
       }
      ],
      "description": "A lower limit for the strength per unitary volume (or mass), for when there is a range. The concentration attribute then becomes the upper limit"
     },
     "country": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/CodeableConcept"
      },
      "description": "The country or countries for which the strength range applies"
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "measurementPoint": {
      "type": "string",
      "description": "For when strength is measured at a particular point or distance"
     },
     "presentation": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Ratio"
       }
      ],
      "description": "The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item"
     },
     "presentationLowLimit": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Ratio"
       }
      ],
      "description": "A lower limit for the quantity of substance in the unit of presentation. For use when there is a range of strengths, this is the lower limit, with the presentation attribute becoming the upper limit"
     },
     "referenceStrength": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/MedicinalProductIngredient.specifiedSubstance.strength.referenceStrength"
      },
      "description": "Strength expressed in terms of a reference substance"
     }
    },
    "required": [
     "id"
    ]
   },
   "MedicinalProductIngredient.specifiedSubstance.strength.referenceStrength": {
    "description": "",
    "type": "object",
    "properties": {
     "country": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/CodeableConcept"
      },
      "description": "The country or countries for which the strength range applies"
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "measurementPoint": {
      "type": "string",
      "description": "For when strength is measured at a particular point or distance"
     },
     "strength": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Ratio"
       }
      ],
      "description": "Strength expressed in terms of a reference substance"
     },
     "strengthLowLimit": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Ratio"
       }
      ],
      "description": "Strength expressed in terms of a reference substance"
     },
     "substance": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Relevant reference substance"
     }
    },
    "required": [
     "id"
    ]
   },
   "Substance": {
    "description": "A homogeneous material with a definite composition",
    "type": "object",
    "properties": {
     "category": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/CodeableConcept"
      },
      "description": "What class/type of substance this is"
     },
     "code": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "What substance this is"
     },
     "contained": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Resource"
      },
      "description": "Contained, inline Resources"
     },
     "description": {
      "type": "string",
      "description": "Textual description of the substance, comments"
     },
     "id": {
      "type": "string",
      "description": "Logical id of this artifact"
     },
     "identifier": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Identifier"
      },
      "description": "Unique identifier"
     },
     "implicitRules": {
      "type": "string",
      "description": "A set of rules under which this content was created"
     },
     "ingredient": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Substance.ingredient"
      },
      "description": "Composition information about the substance"
     },
     "instance": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Substance.instance"
      },
      "description": "If this describes a specific package/container of the substance"
     },
     "language": {
      "type": "string",
      "description": "Language of the resource content"
     },
     "meta": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Meta"
       }
      ],
      "description": "Metadata about the resource"
     },
     "status": {
      "type": "string",
      "description": "active | inactive | entered-in-error"
     },
     "text": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Narrative"
       }
      ],
      "description": "Text summary of the resource, for human interpretation"
     }
    },
    "required": [
     "id"
    ]
   },
   "Substance.ingredient": {
    "description": "",
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "quantity": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Ratio"
       }
      ],
      "description": "Optional amount (concentration)"
     },
     "substance": {
      "description": ""
     },
     "substanceCodeableConcept": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": ""
     },
     "substanceReference": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Reference"
       }
      ],
      "description": ""
     }
    },
    "required": [
     "id"
    ]
   },
   "Substance.instance": {
    "description": "",
    "type": "object",
    "properties": {
     "expiry": {
      "type": "string",
      "description": "When no longer valid to use"
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "identifier": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Identifier"
       }
      ],
      "description": "Identifier of the package/container"
     },
     "quantity": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Quantity"
       }
      ],
      "description": "Amount of substance in the package"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceAmount": {
    "description": "",
    "type": "object",
    "properties": {
     "amount": {
      "description": ""
     },
     "amountQuantity": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Quantity"
       }
      ],
      "description": ""
     },
     "amountRange": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Range"
       }
      ],
      "description": ""
     },
     "amountString": {
      "type": "string",
      "description": ""
     },
     "amountText": {
      "type": "string",
      "description": ""
     },
     "amountType": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": ""
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "referenceRange": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/SubstanceAmount.referenceRange"
       }
      ],
      "description": ""
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceAmount.referenceRange": {
    "description": "",
    "type": "object",
    "properties": {
     "highLimit": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Quantity"
       }
      ],
      "description": "Upper limit possible or expected"
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "lowLimit": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Quantity"
       }
      ],
      "description": "Lower limit possible or expected"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceNucleicAcid": {
    "description": "Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction",
    "type": "object",
    "properties": {
     "areaOfHybridisation": {
      "type": "string",
      "description": "The area of hybridisation shall be described if applicable for double stranded RNA or DNA. The number associated with the subunit followed by the number associated to the residue shall be specified in increasing order. The underscore “” shall be used as separator as follows: “Subunitnumber Residue”"
     },
     "contained": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Resource"
      },
      "description": "Contained, inline Resources"
     },
     "id": {
      "type": "string",
      "description": "Logical id of this artifact"
     },
     "implicitRules": {
      "type": "string",
      "description": "A set of rules under which this content was created"
     },
     "language": {
      "type": "string",
      "description": "Language of the resource content"
     },
     "meta": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Meta"
       }
      ],
      "description": "Metadata about the resource"
     },
     "numberOfSubunits": {
      "type": "number",
      "description": "The number of linear sequences of nucleotides linked through phosphodiester bonds shall be described. Subunits would be strands of nucleic acids that are tightly associated typically through Watson-Crick base pairing. NOTE: If not specified in the reference source, the assumption is that there is 1 subunit"
     },
     "oligoNucleotideType": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "(TBC)"
     },
     "sequenceType": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "The type of the sequence shall be specified based on a controlled vocabulary"
     },
     "subunit": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SubstanceNucleicAcid.subunit"
      },
      "description": "Subunits are listed in order of decreasing length; sequences of the same length will be ordered by molecular weight; subunits that have identical sequences will be repeated multiple times"
     },
     "text": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Narrative"
       }
      ],
      "description": "Text summary of the resource, for human interpretation"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceNucleicAcid.subunit": {
    "description": "",
    "type": "object",
    "properties": {
     "fivePrime": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "The nucleotide present at the 5’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’ prime nucleotide is the letter at the first position in the sequence. A separate representation would be redundant"
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "length": {
      "type": "number",
      "description": "The length of the sequence shall be captured"
     },
     "linkage": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SubstanceNucleicAcid.subunit.linkage"
      },
      "description": "The linkages between sugar residues will also be captured"
     },
     "sequence": {
      "type": "string",
      "description": "Actual nucleotide sequence notation from 5' to 3' end using standard single letter codes. In addition to the base sequence, sugar and type of phosphate or non-phosphate linkage should also be captured"
     },
     "sequenceAttachment": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Attachment"
       }
      ],
      "description": "(TBC)"
     },
     "subunit": {
      "type": "number",
      "description": "Index of linear sequences of nucleic acids in order of decreasing length. Sequences of the same length will be ordered by molecular weight. Subunits that have identical sequences will be repeated and have sequential subscripts"
     },
     "sugar": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SubstanceNucleicAcid.subunit.sugar"
      },
      "description": "5.3.6.8.1 Sugar ID (Mandatory)"
     },
     "threePrime": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "The nucleotide present at the 3’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’ prime nucleotide is the letter at the last position in the sequence. A separate representation would be redundant"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceNucleicAcid.subunit.linkage": {
    "description": "",
    "type": "object",
    "properties": {
     "connectivity": {
      "type": "string",
      "description": "The entity that links the sugar residues together should also be captured for nearly all naturally occurring nucleic acid the linkage is a phosphate group. For many synthetic oligonucleotides phosphorothioate linkages are often seen. Linkage connectivity is assumed to be 3’-5’. If the linkage is either 3’-3’ or 5’-5’ this should be specified"
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "identifier": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Identifier"
       }
      ],
      "description": "Each linkage will be registered as a fragment and have an ID"
     },
     "name": {
      "type": "string",
      "description": "Each linkage will be registered as a fragment and have at least one name. A single name shall be assigned to each linkage"
     },
     "residueSite": {
      "type": "string",
      "description": "Residues shall be captured as described in 5.3.6.8.3"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceNucleicAcid.subunit.sugar": {
    "description": "",
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "identifier": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Identifier"
       }
      ],
      "description": "The Substance ID of the sugar or sugar-like component that make up the nucleotide"
     },
     "name": {
      "type": "string",
      "description": "The name of the sugar or sugar-like component that make up the nucleotide"
     },
     "residueSite": {
      "type": "string",
      "description": "The residues that contain a given sugar will be captured. The order of given residues will be captured in the 5‘-3‘direction consistent with the base sequences listed above"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstancePolymer": {
    "description": "Todo",
    "type": "object",
    "properties": {
     "class": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Todo"
     },
     "contained": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Resource"
      },
      "description": "Contained, inline Resources"
     },
     "copolymerConnectivity": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/CodeableConcept"
      },
      "description": "Todo"
     },
     "geometry": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Todo"
     },
     "id": {
      "type": "string",
      "description": "Logical id of this artifact"
     },
     "implicitRules": {
      "type": "string",
      "description": "A set of rules under which this content was created"
     },
     "language": {
      "type": "string",
      "description": "Language of the resource content"
     },
     "meta": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Meta"
       }
      ],
      "description": "Metadata about the resource"
     },
     "modification": {
      "type": "string",
      "description": "Todo"
     },
     "monomerSet": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SubstancePolymer.monomerSet"
      },
      "description": "Todo"
     },
     "repeat": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SubstancePolymer.repeat"
      },
      "description": "Todo"
     },
     "text": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Narrative"
       }
      ],
      "description": "Text summary of the resource, for human interpretation"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstancePolymer.monomerSet": {
    "description": "",
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "ratioType": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Todo"
     },
     "startingMaterial": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SubstancePolymer.monomerSet.startingMaterial"
      },
      "description": "Todo"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstancePolymer.monomerSet.startingMaterial": {
    "description": "",
    "type": "object",
    "properties": {
     "amount": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/SubstanceAmount"
       }
      ],
      "description": "Todo"
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "isDefining": {
      "type": "boolean",
      "description": "Todo"
     },
     "material": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Todo"
     },
     "type": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Todo"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstancePolymer.repeat": {
    "description": "",
    "type": "object",
    "properties": {
     "averageMolecularFormula": {
      "type": "string",
      "description": "Todo"
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "numberOfUnits": {
      "type": "number",
      "description": "Todo"
     },
     "repeatUnit": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SubstancePolymer.repeat.repeatUnit"
      },
      "description": "Todo"
     },
     "repeatUnitAmountType": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Todo"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstancePolymer.repeat.repeatUnit": {
    "description": "",
    "type": "object",
    "properties": {
     "amount": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/SubstanceAmount"
       }
      ],
      "description": "Todo"
     },
     "degreeOfPolymerisation": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SubstancePolymer.repeat.repeatUnit.degreeOfPolymerisation"
      },
      "description": "Todo"
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "orientationOfPolymerisation": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Todo"
     },
     "repeatUnit": {
      "type": "string",
      "description": "Todo"
     },
     "structuralRepresentation": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SubstancePolymer.repeat.repeatUnit.structuralRepresentation"
      },
      "description": "Todo"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstancePolymer.repeat.repeatUnit.degreeOfPolymerisation": {
    "description": "",
    "type": "object",
    "properties": {
     "amount": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/SubstanceAmount"
       }
      ],
      "description": "Todo"
     },
     "degree": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Todo"
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstancePolymer.repeat.repeatUnit.structuralRepresentation": {
    "description": "",
    "type": "object",
    "properties": {
     "attachment": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Attachment"
       }
      ],
      "description": "Todo"
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "representation": {
      "type": "string",
      "description": "Todo"
     },
     "type": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Todo"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceProtein": {
    "description": "A SubstanceProtein is defined as a single unit of a linear amino acid sequence, or a combination of subunits that are either covalently linked or have a defined invariant stoichiometric relationship. This includes all synthetic, recombinant and purified SubstanceProteins of defined sequence, whether the use is therapeutic or prophylactic. This set of elements will be used to describe albumins, coagulation factors, cytokines, growth factors, peptide/SubstanceProtein hormones, enzymes, toxins, toxoids, recombinant vaccines, and immunomodulators",
    "type": "object",
    "properties": {
     "contained": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Resource"
      },
      "description": "Contained, inline Resources"
     },
     "disulfideLinkage": {
      "type": "string",
      "description": "The disulphide bond between two cysteine residues either on the same subunit or on two different subunits shall be described. The position of the disulfide bonds in the SubstanceProtein shall be listed in increasing order of subunit number and position within subunit followed by the abbreviation of the amino acids involved. The disulfide linkage positions shall actually contain the amino acid Cysteine at the respective positions"
     },
     "id": {
      "type": "string",
      "description": "Logical id of this artifact"
     },
     "implicitRules": {
      "type": "string",
      "description": "A set of rules under which this content was created"
     },
     "language": {
      "type": "string",
      "description": "Language of the resource content"
     },
     "meta": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Meta"
       }
      ],
      "description": "Metadata about the resource"
     },
     "numberOfSubunits": {
      "type": "number",
      "description": "Number of linear sequences of amino acids linked through peptide bonds. The number of subunits constituting the SubstanceProtein shall be described. It is possible that the number of subunits can be variable"
     },
     "sequenceType": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "The SubstanceProtein descriptive elements will only be used when a complete or partial amino acid sequence is available or derivable from a nucleic acid sequence"
     },
     "subunit": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SubstanceProtein.subunit"
      },
      "description": "This subclause refers to the description of each subunit constituting the SubstanceProtein. A subunit is a linear sequence of amino acids linked through peptide bonds. The Subunit information shall be provided when the finished SubstanceProtein is a complex of multiple sequences; subunits are not used to delineate domains within a single sequence. Subunits are listed in order of decreasing length; sequences of the same length will be ordered by decreasing molecular weight; subunits that have identical sequences will be repeated multiple times"
     },
     "text": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Narrative"
       }
      ],
      "description": "Text summary of the resource, for human interpretation"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceProtein.subunit": {
    "description": "",
    "type": "object",
    "properties": {
     "cTerminalModification": {
      "type": "string",
      "description": "The modification at the C-terminal shall be specified"
     },
     "cTerminalModificationId": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Identifier"
       }
      ],
      "description": "Unique identifier for molecular fragment modification based on the ISO 11238 Substance ID"
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "length": {
      "type": "number",
      "description": "Length of linear sequences of amino acids contained in the subunit"
     },
     "nTerminalModification": {
      "type": "string",
      "description": "The name of the fragment modified at the N-terminal of the SubstanceProtein shall be specified"
     },
     "nTerminalModificationId": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Identifier"
       }
      ],
      "description": "Unique identifier for molecular fragment modification based on the ISO 11238 Substance ID"
     },
     "sequence": {
      "type": "string",
      "description": "The sequence information shall be provided enumerating the amino acids from N- to C-terminal end using standard single-letter amino acid codes. Uppercase shall be used for L-amino acids and lowercase for D-amino acids. Transcribed SubstanceProteins will always be described using the translated sequence; for synthetic peptide containing amino acids that are not represented with a single letter code an X should be used within the sequence. The modified amino acids will be distinguished by their position in the sequence"
     },
     "sequenceAttachment": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Attachment"
       }
      ],
      "description": "The sequence information shall be provided enumerating the amino acids from N- to C-terminal end using standard single-letter amino acid codes. Uppercase shall be used for L-amino acids and lowercase for D-amino acids. Transcribed SubstanceProteins will always be described using the translated sequence; for synthetic peptide containing amino acids that are not represented with a single letter code an X should be used within the sequence. The modified amino acids will be distinguished by their position in the sequence"
     },
     "subunit": {
      "type": "number",
      "description": "Index of primary sequences of amino acids linked through peptide bonds in order of decreasing length. Sequences of the same length will be ordered by molecular weight. Subunits that have identical sequences will be repeated and have sequential subscripts"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceReferenceInformation": {
    "description": "Todo",
    "type": "object",
    "properties": {
     "classification": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SubstanceReferenceInformation.classification"
      },
      "description": "Todo"
     },
     "comment": {
      "type": "string",
      "description": "Todo"
     },
     "contained": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Resource"
      },
      "description": "Contained, inline Resources"
     },
     "gene": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SubstanceReferenceInformation.gene"
      },
      "description": "Todo"
     },
     "geneElement": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SubstanceReferenceInformation.geneElement"
      },
      "description": "Todo"
     },
     "id": {
      "type": "string",
      "description": "Logical id of this artifact"
     },
     "implicitRules": {
      "type": "string",
      "description": "A set of rules under which this content was created"
     },
     "language": {
      "type": "string",
      "description": "Language of the resource content"
     },
     "meta": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Meta"
       }
      ],
      "description": "Metadata about the resource"
     },
     "target": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SubstanceReferenceInformation.target"
      },
      "description": "Todo"
     },
     "text": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Narrative"
       }
      ],
      "description": "Text summary of the resource, for human interpretation"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceReferenceInformation.classification": {
    "description": "",
    "type": "object",
    "properties": {
     "classification": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Todo"
     },
     "domain": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Todo"
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "source": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Reference"
      },
      "description": "Todo"
     },
     "subtype": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/CodeableConcept"
      },
      "description": "Todo"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceReferenceInformation.gene": {
    "description": "",
    "type": "object",
    "properties": {
     "gene": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Todo"
     },
     "geneSequenceOrigin": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Todo"
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "source": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Reference"
      },
      "description": "Todo"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceReferenceInformation.geneElement": {
    "description": "",
    "type": "object",
    "properties": {
     "element": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Identifier"
       }
      ],
      "description": "Todo"
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "source": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Reference"
      },
      "description": "Todo"
     },
     "type": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Todo"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceReferenceInformation.target": {
    "description": "",
    "type": "object",
    "properties": {
     "amount": {
      "description": ""
     },
     "amountQuantity": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Quantity"
       }
      ],
      "description": ""
     },
     "amountRange": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Range"
       }
      ],
      "description": ""
     },
     "amountString": {
      "type": "string",
      "description": ""
     },
     "amountType": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Todo"
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "interaction": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Todo"
     },
     "organism": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Todo"
     },
     "organismType": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Todo"
     },
     "source": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Reference"
      },
      "description": "Todo"
     },
     "target": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Identifier"
       }
      ],
      "description": "Todo"
     },
     "type": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Todo"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceSourceMaterial": {
    "description": "Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex",
    "type": "object",
    "properties": {
     "contained": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Resource"
      },
      "description": "Contained, inline Resources"
     },
     "countryOfOrigin": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/CodeableConcept"
      },
      "description": "The country where the plant material is harvested or the countries where the plasma is sourced from as laid down in accordance with the Plasma Master File. For “Plasma-derived substances” the attribute country of origin provides information about the countries used for the manufacturing of the Cryopoor plama or Crioprecipitate"
     },
     "developmentStage": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Stage of life for animals, plants, insects and microorganisms. This information shall be provided only when the substance is significantly different in these stages (e.g. foetal bovine serum)"
     },
     "fractionDescription": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SubstanceSourceMaterial.fractionDescription"
      },
      "description": "Many complex materials are fractions of parts of plants, animals, or minerals. Fraction elements are often necessary to define both Substances and Specified Group 1 Substances. For substances derived from Plants, fraction information will be captured at the Substance information level ( . Oils, Juices and Exudates). Additional information for Extracts, such as extraction solvent composition, will be captured at the Specified Substance Group 1 information level. For plasma-derived products fraction information will be captured at the Substance and the Specified Substance Group 1 levels"
     },
     "geographicalLocation": {
      "type": "string",
      "description": "The place/region where the plant is harvested or the places/regions where the animal source material has its habitat"
     },
     "id": {
      "type": "string",
      "description": "Logical id of this artifact"
     },
     "implicitRules": {
      "type": "string",
      "description": "A set of rules under which this content was created"
     },
     "language": {
      "type": "string",
      "description": "Language of the resource content"
     },
     "meta": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Meta"
       }
      ],
      "description": "Metadata about the resource"
     },
     "organism": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/SubstanceSourceMaterial.organism"
       }
      ],
      "description": "This subclause describes the organism which the substance is derived from. For vaccines, the parent organism shall be specified based on these subclause elements. As an example, full taxonomy will be described for the Substance Name: ., Leaf"
     },
     "organismId": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Identifier"
       }
      ],
      "description": "The unique identifier associated with the source material parent organism shall be specified"
     },
     "organismName": {
      "type": "string",
      "description": "The organism accepted Scientific name shall be provided based on the organism taxonomy"
     },
     "parentSubstanceId": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Identifier"
      },
      "description": "The parent of the herbal drug Ginkgo biloba, Leaf is the substance ID of the substance (fresh) of Ginkgo biloba L. or Ginkgo biloba L. (Whole plant)"
     },
     "parentSubstanceName": {
      "type": "string",
      "description": "The parent substance of the Herbal Drug, or Herbal preparation"
     },
     "partDescription": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SubstanceSourceMaterial.partDescription"
      },
      "description": "To do"
     },
     "sourceMaterialClass": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "General high level classification of the source material specific to the origin of the material"
     },
     "sourceMaterialState": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "The state of the source material when extracted"
     },
     "sourceMaterialType": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "The type of the source material shall be specified based on a controlled vocabulary. For vaccines, this subclause refers to the class of infectious agent"
     },
     "text": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Narrative"
       }
      ],
      "description": "Text summary of the resource, for human interpretation"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceSourceMaterial.fractionDescription": {
    "description": "",
    "type": "object",
    "properties": {
     "fraction": {
      "type": "string",
      "description": "This element is capturing information about the fraction of a plant part, or human plasma for fractionation"
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "materialType": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "The specific type of the material constituting the component. For Herbal preparations the particulars of the extracts (liquid/dry) is described in Specified Substance Group 1"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceSourceMaterial.organism": {
    "description": "",
    "type": "object",
    "properties": {
     "author": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SubstanceSourceMaterial.organism.author"
      },
      "description": "4.9.13.6.1 Author type (Conditional)"
     },
     "family": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "The family of an organism shall be specified"
     },
     "genus": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "The genus of an organism shall be specified; refers to the Latin epithet of the genus element of the plant/animal scientific name; it is present in names for genera, species and infraspecies"
     },
     "hybrid": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/SubstanceSourceMaterial.organism.hybrid"
       }
      ],
      "description": "4.9.13.8.1 Hybrid species maternal organism ID (Optional)"
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "intraspecificDescription": {
      "type": "string",
      "description": "The intraspecific description of an organism shall be specified based on a controlled vocabulary. For Influenza Vaccine, the intraspecific description shall contain the syntax of the antigen in line with the WHO convention"
     },
     "intraspecificType": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "The Intraspecific type of an organism shall be specified"
     },
     "organismGeneral": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/SubstanceSourceMaterial.organism.organismGeneral"
       }
      ],
      "description": "4.9.13.7.1 Kingdom (Conditional)"
     },
     "species": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "The species of an organism shall be specified; refers to the Latin epithet of the species of the plant/animal; it is present in names for species and infraspecies"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceSourceMaterial.organism.author": {
    "description": "",
    "type": "object",
    "properties": {
     "authorDescription": {
      "type": "string",
      "description": "The author of an organism species shall be specified. The author year of an organism shall also be specified when applicable; refers to the year in which the first author(s) published the infraspecific plant/animal name (of any rank)"
     },
     "authorType": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "The type of author of an organism species shall be specified. The parenthetical author of an organism species refers to the first author who published the plant/animal name (of any rank). The primary author of an organism species refers to the first author(s), who validly published the plant/animal name"
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceSourceMaterial.organism.hybrid": {
    "description": "",
    "type": "object",
    "properties": {
     "hybridType": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "The hybrid type of an organism shall be specified"
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "maternalOrganismId": {
      "type": "string",
      "description": "The identifier of the maternal species constituting the hybrid organism shall be specified based on a controlled vocabulary. For plants, the parents aren’t always known, and it is unlikely that it will be known which is maternal and which is paternal"
     },
     "maternalOrganismName": {
      "type": "string",
      "description": "The name of the maternal species constituting the hybrid organism shall be specified. For plants, the parents aren’t always known, and it is unlikely that it will be known which is maternal and which is paternal"
     },
     "paternalOrganismId": {
      "type": "string",
      "description": "The identifier of the paternal species constituting the hybrid organism shall be specified based on a controlled vocabulary"
     },
     "paternalOrganismName": {
      "type": "string",
      "description": "The name of the paternal species constituting the hybrid organism shall be specified"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceSourceMaterial.organism.organismGeneral": {
    "description": "",
    "type": "object",
    "properties": {
     "class": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "The class of an organism shall be specified"
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "kingdom": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "The kingdom of an organism shall be specified"
     },
     "order": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "The order of an organism shall be specified,"
     },
     "phylum": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "The phylum of an organism shall be specified"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceSourceMaterial.partDescription": {
    "description": "",
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "part": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Entity of anatomical origin of source material within an organism"
     },
     "partLocation": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "The detailed anatomic location when the part can be extracted from different anatomical locations of the organism. Multiple alternative locations may apply"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceSpecification": {
    "description": "The detailed description of a substance, typically at a level beyond what is used for prescribing",
    "type": "object",
    "properties": {
     "code": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SubstanceSpecification.code"
      },
      "description": "Codes associated with the substance"
     },
     "comment": {
      "type": "string",
      "description": "Textual comment about this record of a substance"
     },
     "contained": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Resource"
      },
      "description": "Contained, inline Resources"
     },
     "description": {
      "type": "string",
      "description": "Textual description of the substance"
     },
     "domain": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "If the substance applies to only human or veterinary use"
     },
     "id": {
      "type": "string",
      "description": "Logical id of this artifact"
     },
     "identifier": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Identifier"
       }
      ],
      "description": "Identifier by which this substance is known"
     },
     "implicitRules": {
      "type": "string",
      "description": "A set of rules under which this content was created"
     },
     "language": {
      "type": "string",
      "description": "Language of the resource content"
     },
     "meta": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Meta"
       }
      ],
      "description": "Metadata about the resource"
     },
     "moiety": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SubstanceSpecification.moiety"
      },
      "description": "Moiety, for structural modifications"
     },
     "molecularWeight": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SubstanceSpecification.structure.isotope.molecularWeight"
      },
      "description": "The molecular weight or weight range (for proteins, polymers or nucleic acids)"
     },
     "name": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SubstanceSpecification.name"
      },
      "description": "Names applicable to this substance"
     },
     "nucleicAcid": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Reference"
       }
      ],
      "description": "Data items specific to nucleic acids"
     },
     "polymer": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Reference"
       }
      ],
      "description": "Data items specific to polymers"
     },
     "property": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SubstanceSpecification.property"
      },
      "description": "General specifications for this substance, including how it is related to other substances"
     },
     "protein": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Reference"
       }
      ],
      "description": "Data items specific to proteins"
     },
     "referenceInformation": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Reference"
       }
      ],
      "description": "General information detailing this substance"
     },
     "relationship": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SubstanceSpecification.relationship"
      },
      "description": "A link between this substance and another, with details of the relationship"
     },
     "source": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Reference"
      },
      "description": "Supporting literature"
     },
     "sourceMaterial": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Reference"
       }
      ],
      "description": "Material or taxonomic/anatomical source for the substance"
     },
     "status": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Status of substance within the catalogue e.g. approved"
     },
     "structure": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/SubstanceSpecification.structure"
       }
      ],
      "description": "Structural information"
     },
     "text": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Narrative"
       }
      ],
      "description": "Text summary of the resource, for human interpretation"
     },
     "type": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "High level categorization, e.g. polymer or nucleic acid"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceSpecification.code": {
    "description": "",
    "type": "object",
    "properties": {
     "code": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "The specific code"
     },
     "comment": {
      "type": "string",
      "description": "Any comment can be provided in this field, if necessary"
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "source": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Reference"
      },
      "description": "Supporting literature"
     },
     "status": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Status of the code assignment"
     },
     "statusDate": {
      "type": "string",
      "description": "The date at which the code status is changed as part of the terminology maintenance"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceSpecification.moiety": {
    "description": "",
    "type": "object",
    "properties": {
     "amount": {
      "description": ""
     },
     "amountQuantity": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Quantity"
       }
      ],
      "description": ""
     },
     "amountString": {
      "type": "string",
      "description": ""
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "identifier": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Identifier"
       }
      ],
      "description": "Identifier by which this moiety substance is known"
     },
     "molecularFormula": {
      "type": "string",
      "description": "Molecular formula"
     },
     "name": {
      "type": "string",
      "description": "Textual name for this moiety substance"
     },
     "opticalActivity": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Optical activity type"
     },
     "role": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Role that the moiety is playing"
     },
     "stereochemistry": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Stereochemistry type"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceSpecification.name": {
    "description": "",
    "type": "object",
    "properties": {
     "domain": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/CodeableConcept"
      },
      "description": "The use context of this name for example if there is a different name a drug active ingredient as opposed to a food colour additive"
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "jurisdiction": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/CodeableConcept"
      },
      "description": "The jurisdiction where this name applies"
     },
     "language": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/CodeableConcept"
      },
      "description": "Language of the name"
     },
     "name": {
      "type": "string",
      "description": "The actual name"
     },
     "official": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SubstanceSpecification.name.official"
      },
      "description": "Details of the official nature of this name"
     },
     "preferred": {
      "type": "boolean",
      "description": "If this is the preferred name for this substance"
     },
     "source": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Reference"
      },
      "description": "Supporting literature"
     },
     "status": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "The status of the name"
     },
     "synonym": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SubstanceSpecification.name"
      },
      "description": "A synonym of this name"
     },
     "translation": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SubstanceSpecification.name"
      },
      "description": "A translation for this name"
     },
     "type": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Name type"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceSpecification.name.official": {
    "description": "",
    "type": "object",
    "properties": {
     "authority": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Which authority uses this official name"
     },
     "date": {
      "type": "string",
      "description": "Date of official name change"
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "status": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "The status of the official name"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceSpecification.property": {
    "description": "",
    "type": "object",
    "properties": {
     "amount": {
      "description": ""
     },
     "amountQuantity": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Quantity"
       }
      ],
      "description": ""
     },
     "amountString": {
      "type": "string",
      "description": ""
     },
     "category": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "A category for this property, e.g. Physical, Chemical, Enzymatic"
     },
     "code": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Property type e.g. viscosity, pH, isoelectric point"
     },
     "definingSubstance": {
      "description": ""
     },
     "definingSubstanceCodeableConcept": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": ""
     },
     "definingSubstanceReference": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Reference"
       }
      ],
      "description": ""
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "parameters": {
      "type": "string",
      "description": "Parameters that were used in the measurement of a property (e.g. for viscosity: measured at 20C with a pH of 7.1)"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceSpecification.relationship": {
    "description": "",
    "type": "object",
    "properties": {
     "amount": {
      "description": ""
     },
     "amountQuantity": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Quantity"
       }
      ],
      "description": ""
     },
     "amountRange": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Range"
       }
      ],
      "description": ""
     },
     "amountRatio": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Ratio"
       }
      ],
      "description": ""
     },
     "amountRatioLowLimit": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Ratio"
       }
      ],
      "description": "For use when the numeric"
     },
     "amountString": {
      "type": "string",
      "description": ""
     },
     "amountType": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "An operator for the amount, for example \"average\", \"approximately\", \"less than\""
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "isDefining": {
      "type": "boolean",
      "description": "For example where an enzyme strongly bonds with a particular substance, this is a defining relationship for that enzyme, out of several possible substance relationships"
     },
     "relationship": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "For example \"salt to parent\", \"active moiety\", \"starting material\""
     },
     "source": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Reference"
      },
      "description": "Supporting literature"
     },
     "substance": {
      "description": ""
     },
     "substanceCodeableConcept": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": ""
     },
     "substanceReference": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Reference"
       }
      ],
      "description": ""
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceSpecification.structure": {
    "description": "",
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "isotope": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SubstanceSpecification.structure.isotope"
      },
      "description": "Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio"
     },
     "molecularFormula": {
      "type": "string",
      "description": "Molecular formula"
     },
     "molecularFormulaByMoiety": {
      "type": "string",
      "description": "Specified per moiety according to the Hill system, i.e. first C, then H, then alphabetical, each moiety separated by a dot"
     },
     "molecularWeight": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/SubstanceSpecification.structure.isotope.molecularWeight"
       }
      ],
      "description": "The molecular weight or weight range (for proteins, polymers or nucleic acids)"
     },
     "opticalActivity": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Optical activity type"
     },
     "representation": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/SubstanceSpecification.structure.representation"
      },
      "description": "Molecular structural representation"
     },
     "source": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Reference"
      },
      "description": "Supporting literature"
     },
     "stereochemistry": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Stereochemistry type"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceSpecification.structure.isotope": {
    "description": "",
    "type": "object",
    "properties": {
     "halfLife": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Quantity"
       }
      ],
      "description": "Half life - for a non-natural nuclide"
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "identifier": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Identifier"
       }
      ],
      "description": "Substance identifier for each non-natural or radioisotope"
     },
     "molecularWeight": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/SubstanceSpecification.structure.isotope.molecularWeight"
       }
      ],
      "description": "The molecular weight or weight range (for proteins, polymers or nucleic acids)"
     },
     "name": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Substance name for each non-natural or radioisotope"
     },
     "substitution": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "The type of isotopic substitution present in a single substance"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceSpecification.structure.isotope.molecularWeight": {
    "description": "",
    "type": "object",
    "properties": {
     "amount": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Quantity"
       }
      ],
      "description": "Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field"
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "method": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "The method by which the molecular weight was determined"
     },
     "type": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Type of molecular weight such as exact, average (also known as. number average), weight average"
     }
    },
    "required": [
     "id"
    ]
   },
   "SubstanceSpecification.structure.representation": {
    "description": "",
    "type": "object",
    "properties": {
     "attachment": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Attachment"
       }
      ],
      "description": "An attached file with the structural representation"
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "representation": {
      "type": "string",
      "description": "The structural representation as text string in a format e.g. InChI, SMILES, MOLFILE, CDX"
     },
     "type": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "The type of structure (e.g. Full, Partial, Representative)"
     }
    },
    "required": [
     "id"
    ]
   },
   "CodeableConcept": {
    "description": "",
    "type": "object",
    "properties": {
     "coding": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Coding"
      },
      "description": "Code defined by a terminology system"
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "text": {
      "type": "string",
      "description": "Plain text representation of the concept"
     }
    },
    "required": [
     "id"
    ]
   },
   "Resource": {
    "description": "Base Resource",
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "description": "Logical id of this artifact"
     },
     "implicitRules": {
      "type": "string",
      "description": "A set of rules under which this content was created"
     },
     "language": {
      "type": "string",
      "description": "Language of the resource content"
     },
     "meta": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Meta"
       }
      ],
      "description": "Metadata about the resource"
     }
    },
    "required": [
     "id"
    ]
   },
   "Extension": {
    "description": "",
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "description": ""
     },
     "url": {
      "type": "string",
      "description": "identifies the meaning of the extension"
     },
     "value": {
      "description": ""
     },
     "valueAddress": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Address"
       }
      ],
      "description": ""
     },
     "valueAge": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Age"
       }
      ],
      "description": ""
     },
     "valueAnnotation": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Annotation"
       }
      ],
      "description": ""
     },
     "valueAttachment": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Attachment"
       }
      ],
      "description": ""
     },
     "valueBase64Binary": {
      "type": "string",
      "description": ""
     },
     "valueBoolean": {
      "type": "boolean",
      "description": ""
     },
     "valueCanonical": {
      "type": "string",
      "description": ""
     },
     "valueCode": {
      "type": "string",
      "description": ""
     },
     "valueCodeableConcept": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": ""
     },
     "valueCoding": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Coding"
       }
      ],
      "description": ""
     },
     "valueContactDetail": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/ContactDetail"
       }
      ],
      "description": ""
     },
     "valueContactPoint": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/ContactPoint"
       }
      ],
      "description": ""
     },
     "valueContributor": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Contributor"
       }
      ],
      "description": ""
     },
     "valueCount": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Count"
       }
      ],
      "description": ""
     },
     "valueDataRequirement": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/DataRequirement"
       }
      ],
      "description": ""
     },
     "valueDate": {
      "type": "string",
      "description": ""
     },
     "valueDateTime": {
      "type": "string",
      "description": ""
     },
     "valueDecimal": {
      "type": "number",
      "description": ""
     },
     "valueDistance": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Distance"
       }
      ],
      "description": ""
     },
     "valueDosage": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Dosage"
       }
      ],
      "description": ""
     },
     "valueDuration": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Duration"
       }
      ],
      "description": ""
     },
     "valueExpression": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Expression"
       }
      ],
      "description": ""
     },
     "valueHumanName": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/HumanName"
       }
      ],
      "description": ""
     },
     "valueId": {
      "type": "string",
      "description": ""
     },
     "valueIdentifier": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Identifier"
       }
      ],
      "description": ""
     },
     "valueInstant": {
      "type": "string",
      "description": ""
     },
     "valueInteger": {
      "type": "number",
      "description": ""
     },
     "valueMarkdown": {
      "type": "string",
      "description": ""
     },
     "valueMeta": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Meta"
       }
      ],
      "description": ""
     },
     "valueMoney": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Money"
       }
      ],
      "description": ""
     },
     "valueOid": {
      "type": "string",
      "description": ""
     },
     "valueParameterDefinition": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/ParameterDefinition"
       }
      ],
      "description": ""
     },
     "valuePeriod": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Period"
       }
      ],
      "description": ""
     },
     "valuePositiveInt": {
      "type": "number",
      "description": ""
     },
     "valueQuantity": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Quantity"
       }
      ],
      "description": ""
     },
     "valueRange": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Range"
       }
      ],
      "description": ""
     },
     "valueRatio": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Ratio"
       }
      ],
      "description": ""
     },
     "valueReference": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Reference"
       }
      ],
      "description": ""
     },
     "valueRelatedArtifact": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/RelatedArtifact"
       }
      ],
      "description": ""
     },
     "valueSampledData": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/SampledData"
       }
      ],
      "description": ""
     },
     "valueSignature": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Signature"
       }
      ],
      "description": ""
     },
     "valueString": {
      "type": "string",
      "description": ""
     },
     "valueTime": {
      "type": "string",
      "description": ""
     },
     "valueTiming": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Timing"
       }
      ],
      "description": ""
     },
     "valueTriggerDefinition": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/TriggerDefinition"
       }
      ],
      "description": ""
     },
     "valueUnsignedInt": {
      "type": "number",
      "description": ""
     },
     "valueUri": {
      "type": "string",
      "description": ""
     },
     "valueUrl": {
      "type": "string",
      "description": ""
     },
     "valueUsageContext": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/UsageContext"
       }
      ],
      "description": ""
     },
     "valueUuid": {
      "type": "string",
      "description": ""
     }
    },
    "required": [
     "id"
    ]
   },
   "Identifier": {
    "description": "",
    "type": "object",
    "properties": {
     "assigner": {
      "type": "string",
      "description": "Organization that issued id (may be just text)"
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "period": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Period"
       }
      ],
      "description": "Time period when id is/was valid for use"
     },
     "system": {
      "type": "string",
      "description": "The namespace for the identifier value"
     },
     "type": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "Description of identifier"
     },
     "use": {
      "type": "string",
      "description": "usual | official | temp | secondary | old (If known)"
     },
     "value": {
      "type": "string",
      "description": "The value that is unique"
     }
    },
    "required": [
     "id"
    ]
   },
   "Meta": {
    "description": "",
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "description": ""
     },
     "lastUpdated": {
      "type": "string",
      "description": "When the resource version last changed"
     },
     "profile": {
      "type": "string",
      "description": "Profiles this resource claims to conform to"
     },
     "security": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Coding"
      },
      "description": "Security Labels applied to this resource"
     },
     "source": {
      "type": "string",
      "description": "Identifies where the resource comes from"
     },
     "tag": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Coding"
      },
      "description": "Tags applied to this resource"
     },
     "versionId": {
      "type": "string",
      "description": "Version specific identifier"
     }
    },
    "required": [
     "id"
    ]
   },
   "Narrative": {
    "description": "",
    "type": "object",
    "properties": {
     "div": {
      "description": "Limited xhtml content"
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "status": {
      "type": "string",
      "description": "generated | extensions | additional | empty"
     }
    },
    "required": [
     "id"
    ]
   },
   "Coding": {
    "description": "",
    "type": "object",
    "properties": {
     "code": {
      "type": "string",
      "description": "Symbol in syntax defined by the system"
     },
     "display": {
      "type": "string",
      "description": "Representation defined by the system"
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "system": {
      "type": "string",
      "description": "Identity of the terminology system"
     },
     "userSelected": {
      "type": "boolean",
      "description": "If this coding was chosen directly by the user"
     },
     "version": {
      "type": "string",
      "description": "Version of the system - if relevant"
     }
    },
    "required": [
     "id"
    ]
   },
   "Period": {
    "description": "",
    "type": "object",
    "properties": {
     "end": {
      "type": "string",
      "description": "End time with inclusive boundary, if not ongoing"
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "start": {
      "type": "string",
      "description": "Starting time with inclusive boundary"
     }
    },
    "required": [
     "id"
    ]
   },
   "Ratio": {
    "description": "",
    "type": "object",
    "properties": {
     "denominator": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Quantity"
       }
      ],
      "description": "Denominator value"
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "numerator": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Quantity"
       }
      ],
      "description": "Numerator value"
     }
    },
    "required": [
     "id"
    ]
   },
   "Reference": {
    "description": "",
    "type": "object",
    "properties": {
     "display": {
      "type": "string",
      "description": "Text alternative for the resource"
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "identifier": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Identifier"
       }
      ],
      "description": "Logical reference, when literal reference is not known"
     },
     "reference": {
      "type": "string",
      "description": "Literal reference, Relative, internal or absolute URL"
     },
     "type": {
      "type": "string",
      "description": "Type the reference refers to (e.g. \"Patient\")"
     }
    },
    "required": [
     "id"
    ]
   },
   "Quantity": {
    "description": "",
    "type": "object",
    "properties": {
     "code": {
      "type": "string",
      "description": "Coded form of the unit"
     },
     "comparator": {
      "type": "string",
      "description": "< | <= | >= | > - how to understand the value"
     },
     "id": {
      "type": "string",
      "description": "Unique id for inter-element referencing"
     },
     "system": {
      "type": "string",
      "description": "System that defines coded unit form"
     },
     "unit": {
      "type": "string",
      "description": "Unit representation"
     },
     "value": {
      "type": "number",
      "description": "Numerical value (with implicit precision)"
     }
    },
    "required": [
     "id"
    ]
   },
   "Range": {
    "description": "",
    "type": "object",
    "properties": {
     "high": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Quantity"
       }
      ],
      "description": "High limit"
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "low": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Quantity"
       }
      ],
      "description": "Low limit"
     }
    },
    "required": [
     "id"
    ]
   },
   "Attachment": {
    "description": "",
    "type": "object",
    "properties": {
     "contentType": {
      "type": "string",
      "description": "Mime type of the content, with charset etc."
     },
     "creation": {
      "type": "string",
      "description": "Date attachment was first created"
     },
     "data": {
      "type": "string",
      "description": "Data inline, base64ed"
     },
     "hash": {
      "type": "string",
      "description": "Hash of the data (sha-1, base64ed)"
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "language": {
      "type": "string",
      "description": "Human language of the content (BCP-47)"
     },
     "size": {
      "type": "number",
      "description": "Number of bytes of content (if url provided)"
     },
     "title": {
      "type": "string",
      "description": "Label to display in place of the data"
     },
     "url": {
      "type": "string",
      "description": "Uri where the data can be found"
     }
    },
    "required": [
     "id"
    ]
   },
   "Address": {
    "description": "",
    "type": "object",
    "properties": {
     "city": {
      "type": "string",
      "description": "Name of city, town etc."
     },
     "country": {
      "type": "string",
      "description": "Country (e.g. can be ISO 3166 2 or 3 letter code)"
     },
     "district": {
      "type": "string",
      "description": "District name (aka county)"
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "line": {
      "type": "string",
      "description": "Street name, number, direction & P.O. Box etc."
     },
     "period": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Period"
       }
      ],
      "description": "Time period when address was/is in use"
     },
     "postalCode": {
      "type": "string",
      "description": "Postal code for area"
     },
     "state": {
      "type": "string",
      "description": "Sub-unit of country (abbreviations ok)"
     },
     "text": {
      "type": "string",
      "description": "Text representation of the address"
     },
     "type": {
      "type": "string",
      "description": "postal | physical | both"
     },
     "use": {
      "type": "string",
      "description": "home | work | temp | old | billing - purpose of this address"
     }
    },
    "required": [
     "id"
    ]
   },
   "Age": {
    "description": "",
    "type": "object",
    "properties": {
     "code": {
      "type": "string",
      "description": ""
     },
     "comparator": {
      "type": "string",
      "description": ""
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "system": {
      "type": "string",
      "description": ""
     },
     "unit": {
      "type": "string",
      "description": ""
     },
     "value": {
      "type": "number",
      "description": ""
     }
    },
    "required": [
     "id"
    ]
   },
   "Annotation": {
    "description": "",
    "type": "object",
    "properties": {
     "author": {
      "description": ""
     },
     "authorReference": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Reference"
       }
      ],
      "description": ""
     },
     "authorString": {
      "type": "string",
      "description": ""
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "text": {
      "type": "string",
      "description": "The annotation  - text content (as markdown)"
     },
     "time": {
      "type": "string",
      "description": "When the annotation was made"
     }
    },
    "required": [
     "id"
    ]
   },
   "ContactDetail": {
    "description": "",
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "description": ""
     },
     "name": {
      "type": "string",
      "description": "Name of an individual to contact"
     },
     "telecom": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/ContactPoint"
      },
      "description": "Contact details for individual or organization"
     }
    },
    "required": [
     "id"
    ]
   },
   "ContactPoint": {
    "description": "",
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "description": ""
     },
     "period": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Period"
       }
      ],
      "description": "Time period when the contact point was/is in use"
     },
     "rank": {
      "type": "number",
      "description": "Specify preferred order of use (1 = highest)"
     },
     "system": {
      "type": "string",
      "description": "phone | fax | email | pager | url | sms | other"
     },
     "use": {
      "type": "string",
      "description": "home | work | temp | old | mobile - purpose of this contact point"
     },
     "value": {
      "type": "string",
      "description": "The actual contact point details"
     }
    },
    "required": [
     "id"
    ]
   },
   "Contributor": {
    "description": "",
    "type": "object",
    "properties": {
     "contact": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/ContactDetail"
      },
      "description": "Contact details of the contributor"
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "name": {
      "type": "string",
      "description": "Who contributed the content"
     },
     "type": {
      "type": "string",
      "description": "author | editor | reviewer | endorser"
     }
    },
    "required": [
     "id"
    ]
   },
   "Count": {
    "description": "",
    "type": "object",
    "properties": {
     "code": {
      "type": "string",
      "description": ""
     },
     "comparator": {
      "type": "string",
      "description": ""
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "system": {
      "type": "string",
      "description": ""
     },
     "unit": {
      "type": "string",
      "description": ""
     },
     "value": {
      "type": "number",
      "description": ""
     }
    },
    "required": [
     "id"
    ]
   },
   "DataRequirement": {
    "description": "",
    "type": "object",
    "properties": {
     "codeFilter": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/DataRequirement.codeFilter"
      },
      "description": ""
     },
     "dateFilter": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/DataRequirement.dateFilter"
      },
      "description": ""
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "limit": {
      "type": "number",
      "description": "Number of results"
     },
     "mustSupport": {
      "type": "string",
      "description": "Indicates specific structure elements that are referenced by the knowledge module"
     },
     "profile": {
      "type": "string",
      "description": "The profile of the required data"
     },
     "sort": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/DataRequirement.sort"
      },
      "description": ""
     },
     "subject": {
      "description": ""
     },
     "subjectCodeableConcept": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": ""
     },
     "subjectReference": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Reference"
       }
      ],
      "description": ""
     },
     "type": {
      "type": "string",
      "description": "The type of the required data"
     }
    },
    "required": [
     "id"
    ]
   },
   "Distance": {
    "description": "",
    "type": "object",
    "properties": {
     "code": {
      "type": "string",
      "description": ""
     },
     "comparator": {
      "type": "string",
      "description": ""
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "system": {
      "type": "string",
      "description": ""
     },
     "unit": {
      "type": "string",
      "description": ""
     },
     "value": {
      "type": "number",
      "description": ""
     }
    },
    "required": [
     "id"
    ]
   },
   "Dosage": {
    "description": "",
    "type": "object",
    "properties": {
     "additionalInstruction": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/CodeableConcept"
      },
      "description": ""
     },
     "asNeeded": {
      "description": ""
     },
     "asNeededBoolean": {
      "type": "boolean",
      "description": ""
     },
     "asNeededCodeableConcept": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": ""
     },
     "doseAndRate": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Dosage.doseAndRate"
      },
      "description": ""
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "maxDosePerAdministration": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Quantity"
       }
      ],
      "description": ""
     },
     "maxDosePerLifetime": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Quantity"
       }
      ],
      "description": ""
     },
     "maxDosePerPeriod": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Ratio"
       }
      ],
      "description": ""
     },
     "method": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": ""
     },
     "patientInstruction": {
      "type": "string",
      "description": ""
     },
     "route": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": ""
     },
     "sequence": {
      "type": "number",
      "description": ""
     },
     "site": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": ""
     },
     "text": {
      "type": "string",
      "description": ""
     },
     "timing": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Timing"
       }
      ],
      "description": ""
     }
    },
    "required": [
     "id"
    ]
   },
   "Duration": {
    "description": "",
    "type": "object",
    "properties": {
     "code": {
      "type": "string",
      "description": ""
     },
     "comparator": {
      "type": "string",
      "description": ""
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "system": {
      "type": "string",
      "description": ""
     },
     "unit": {
      "type": "string",
      "description": ""
     },
     "value": {
      "type": "number",
      "description": ""
     }
    },
    "required": [
     "id"
    ]
   },
   "Expression": {
    "description": "",
    "type": "object",
    "properties": {
     "description": {
      "type": "string",
      "description": "Natural language description of the condition"
     },
     "expression": {
      "type": "string",
      "description": "Expression in specified language"
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "language": {
      "type": "string",
      "description": "text/cql | text/fhirpath | application/x-fhir-query | etc."
     },
     "name": {
      "type": "string",
      "description": "Short name assigned to expression for reuse"
     },
     "reference": {
      "type": "string",
      "description": "Where the expression is found"
     }
    },
    "required": [
     "id"
    ]
   },
   "HumanName": {
    "description": "",
    "type": "object",
    "properties": {
     "family": {
      "type": "string",
      "description": "Family name (often called 'Surname')"
     },
     "given": {
      "type": "string",
      "description": "Given names (not always 'first'). Includes middle names"
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "period": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Period"
       }
      ],
      "description": "Time period when name was/is in use"
     },
     "prefix": {
      "type": "string",
      "description": "Parts that come before the name"
     },
     "suffix": {
      "type": "string",
      "description": "Parts that come after the name"
     },
     "text": {
      "type": "string",
      "description": "Text representation of the full name"
     },
     "use": {
      "type": "string",
      "description": "usual | official | temp | nickname | anonymous | old | maiden"
     }
    },
    "required": [
     "id"
    ]
   },
   "Money": {
    "description": "",
    "type": "object",
    "properties": {
     "currency": {
      "type": "string",
      "description": "ISO 4217 Currency Code"
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "value": {
      "type": "number",
      "description": "Numerical value (with implicit precision)"
     }
    },
    "required": [
     "id"
    ]
   },
   "ParameterDefinition": {
    "description": "",
    "type": "object",
    "properties": {
     "documentation": {
      "type": "string",
      "description": "A brief description of the parameter"
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "max": {
      "type": "string",
      "description": "Maximum cardinality (a number of *)"
     },
     "min": {
      "type": "number",
      "description": "Minimum cardinality"
     },
     "name": {
      "type": "string",
      "description": "Name used to access the parameter value"
     },
     "profile": {
      "type": "string",
      "description": "What profile the value is expected to be"
     },
     "type": {
      "type": "string",
      "description": "What type of value"
     },
     "use": {
      "type": "string",
      "description": "in | out"
     }
    },
    "required": [
     "id"
    ]
   },
   "RelatedArtifact": {
    "description": "",
    "type": "object",
    "properties": {
     "citation": {
      "type": "string",
      "description": "Bibliographic citation for the artifact"
     },
     "display": {
      "type": "string",
      "description": "Brief description of the related artifact"
     },
     "document": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Attachment"
       }
      ],
      "description": "What document is being referenced"
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "label": {
      "type": "string",
      "description": "Short label"
     },
     "resource": {
      "type": "string",
      "description": "What resource is being referenced"
     },
     "type": {
      "type": "string",
      "description": "documentation | justification | citation | predecessor | successor | derived-from | depends-on | composed-of"
     },
     "url": {
      "type": "string",
      "description": "Where the artifact can be accessed"
     }
    },
    "required": [
     "id"
    ]
   },
   "SampledData": {
    "description": "",
    "type": "object",
    "properties": {
     "data": {
      "type": "string",
      "description": "Decimal values with spaces, or \"E\" | \"U\" | \"L\""
     },
     "dimensions": {
      "type": "number",
      "description": "Number of sample points at each time point"
     },
     "factor": {
      "type": "number",
      "description": "Multiply data by this before adding to origin"
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "lowerLimit": {
      "type": "number",
      "description": "Lower limit of detection"
     },
     "origin": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Quantity"
       }
      ],
      "description": "Zero value and units"
     },
     "period": {
      "type": "number",
      "description": "Number of milliseconds between samples"
     },
     "upperLimit": {
      "type": "number",
      "description": "Upper limit of detection"
     }
    },
    "required": [
     "id"
    ]
   },
   "Signature": {
    "description": "",
    "type": "object",
    "properties": {
     "data": {
      "type": "string",
      "description": "The actual signature content (XML DigSig. JWS, picture, etc.)"
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "onBehalfOf": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Reference"
       }
      ],
      "description": "The party represented"
     },
     "sigFormat": {
      "type": "string",
      "description": "The technical format of the signature"
     },
     "targetFormat": {
      "type": "string",
      "description": "The technical format of the signed resources"
     },
     "type": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Coding"
      },
      "description": "Indication of the reason the entity signed the object(s)"
     },
     "when": {
      "type": "string",
      "description": "When the signature was created"
     },
     "who": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Reference"
       }
      ],
      "description": "Who signed"
     }
    },
    "required": [
     "id"
    ]
   },
   "Timing": {
    "description": "",
    "type": "object",
    "properties": {
     "code": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": ""
     },
     "event": {
      "type": "string",
      "description": ""
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "repeat": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Timing.repeat"
       }
      ],
      "description": ""
     }
    },
    "required": [
     "id"
    ]
   },
   "TriggerDefinition": {
    "description": "",
    "type": "object",
    "properties": {
     "condition": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Expression"
       }
      ],
      "description": "Whether the event triggers (boolean expression)"
     },
     "data": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/DataRequirement"
      },
      "description": "Triggering data of the event (multiple = 'and')"
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "name": {
      "type": "string",
      "description": "Name or URI that identifies the event"
     },
     "timing": {
      "description": ""
     },
     "timingDate": {
      "type": "string",
      "description": ""
     },
     "timingDateTime": {
      "type": "string",
      "description": ""
     },
     "timingReference": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Reference"
       }
      ],
      "description": ""
     },
     "timingTiming": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Timing"
       }
      ],
      "description": ""
     },
     "type": {
      "type": "string",
      "description": "named-event | periodic | data-changed | data-added | data-modified | data-removed | data-accessed | data-access-ended"
     }
    },
    "required": [
     "id"
    ]
   },
   "UsageContext": {
    "description": "",
    "type": "object",
    "properties": {
     "code": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Coding"
       }
      ],
      "description": "Type of context being specified"
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "value": {
      "description": ""
     },
     "valueCodeableConcept": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": ""
     },
     "valueQuantity": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Quantity"
       }
      ],
      "description": ""
     },
     "valueRange": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Range"
       }
      ],
      "description": ""
     },
     "valueReference": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Reference"
       }
      ],
      "description": ""
     }
    },
    "required": [
     "id"
    ]
   },
   "DataRequirement.codeFilter": {
    "description": "",
    "type": "object",
    "properties": {
     "code": {
      "type": "array",
      "items": {
       "$ref": "#/components/schemas/Coding"
      },
      "description": "What code is expected"
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "path": {
      "type": "string",
      "description": "A code-valued attribute to filter on"
     },
     "searchParam": {
      "type": "string",
      "description": "A coded (token) parameter to search on"
     },
     "valueSet": {
      "type": "string",
      "description": "Valueset for the filter"
     }
    },
    "required": [
     "id"
    ]
   },
   "DataRequirement.dateFilter": {
    "description": "",
    "type": "object",
    "properties": {
     "id": {
      "type": "string",
      "description": ""
     },
     "path": {
      "type": "string",
      "description": "A date-valued attribute to filter on"
     },
     "searchParam": {
      "type": "string",
      "description": "A date valued parameter to search on"
     },
     "value": {
      "description": ""
     },
     "valueDateTime": {
      "type": "string",
      "description": ""
     },
     "valueDuration": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Duration"
       }
      ],
      "description": ""
     },
     "valuePeriod": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Period"
       }
      ],
      "description": ""
     }
    },
    "required": [
     "id"
    ]
   },
   "DataRequirement.sort": {
    "description": "",
    "type": "object",
    "properties": {
     "direction": {
      "type": "string",
      "description": "ascending | descending"
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "path": {
      "type": "string",
      "description": "The name of the attribute to perform the sort"
     }
    },
    "required": [
     "id"
    ]
   },
   "Dosage.doseAndRate": {
    "description": "",
    "type": "object",
    "properties": {
     "dose": {
      "description": ""
     },
     "doseQuantity": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Quantity"
       }
      ],
      "description": ""
     },
     "doseRange": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Range"
       }
      ],
      "description": ""
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "rate": {
      "description": ""
     },
     "rateQuantity": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Quantity"
       }
      ],
      "description": ""
     },
     "rateRange": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Range"
       }
      ],
      "description": ""
     },
     "rateRatio": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Ratio"
       }
      ],
      "description": ""
     },
     "type": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/CodeableConcept"
       }
      ],
      "description": "The kind of dose or rate specified"
     }
    },
    "required": [
     "id"
    ]
   },
   "Timing.repeat": {
    "description": "",
    "type": "object",
    "properties": {
     "bounds": {
      "description": ""
     },
     "boundsDuration": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Duration"
       }
      ],
      "description": ""
     },
     "boundsPeriod": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Period"
       }
      ],
      "description": ""
     },
     "boundsRange": {
      "type": "object",
      "allOf": [
       {
        "$ref": "#/components/schemas/Range"
       }
      ],
      "description": ""
     },
     "count": {
      "type": "number",
      "description": "Number of times to repeat"
     },
     "countMax": {
      "type": "number",
      "description": "Maximum number of times to repeat"
     },
     "dayOfWeek": {
      "type": "string",
      "description": "mon | tue | wed | thu | fri | sat | sun"
     },
     "duration": {
      "type": "number",
      "description": "How long when it happens"
     },
     "durationMax": {
      "type": "number",
      "description": "How long when it happens (Max)"
     },
     "durationUnit": {
      "type": "string",
      "description": "s | min | h | d | wk | mo | a - unit of time (UCUM)"
     },
     "frequency": {
      "type": "number",
      "description": "Event occurs frequency times per period"
     },
     "frequencyMax": {
      "type": "number",
      "description": "Event occurs up to frequencyMax times per period"
     },
     "id": {
      "type": "string",
      "description": ""
     },
     "offset": {
      "type": "number",
      "description": "Minutes from event (before or after)"
     },
     "period": {
      "type": "number",
      "description": "Event occurs frequency times per period"
     },
     "periodMax": {
      "type": "number",
      "description": "Upper limit of period (3-4 hours)"
     },
     "periodUnit": {
      "type": "string",
      "description": "s | min | h | d | wk | mo | a - unit of time (UCUM)"
     },
     "timeOfDay": {
      "type": "string",
      "description": "Time of day for action"
     },
     "when": {
      "type": "string",
      "description": "Code for time period of occurrence"
     }
    },
    "required": [
     "id"
    ]
   }
  }
 },
 "paths": {
  "/Substance": {
   "post": {
    "tags": [
     "Substance"
    ],
    "responses": {
     "200": {
      "description": "Success",
      "content": {}
     }
    },
    "requestBody": {
     "content": {
      "application/fhir+json": {
       "schema": {
        "$ref": "#/components/schemas/Substance"
       },
       "examples": {
        "substance-example-amoxicillin-clavulanate.json": {
         "value": {
          "resourceType": "Substance",
          "id": "f205",
          "text": {
           "status": "generated",
           "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><p><b>Generated Narrative with Details</b></p><p><b>id</b>: f205</p><p><b>contained</b>: , </p><p><b>category</b>: Drug or Medicament <span>(Details : {http://terminology.hl7.org/CodeSystem/substance-category code 'drug' = 'Drug or Medicament', given as 'Drug or Medicament'})</span></p><p><b>code</b>: Amoxicillin + clavulanate potassium 875mg/125mg tablet (product) <span>(Details : {SNOMED CT code '392259005' = 'Co-amoxiclav 875mg/125mg tablet', given as 'Amoxicillin + clavulanate potassium 875mg/125mg tablet (product)'})</span></p><p><b>description</b>: Augmentin 875</p><blockquote><p><b>ingredient</b></p><p><b>quantity</b>: 875 mg<span> (Details: UCUM code mg = 'mg')</span>/1000 mg<span> (Details: UCUM code mg = 'mg')</span></p><p><b>substance</b>: id: ingr1; Amoxicillin (substance) <span>(Details : {SNOMED CT code '372687004' = 'Amoxicillin', given as 'Amoxicillin (substance)'})</span></p></blockquote><blockquote><p><b>ingredient</b></p><p><b>quantity</b>: 125 mg<span> (Details: UCUM code mg = 'mg')</span>/1000 mg<span> (Details: UCUM code mg = 'mg')</span></p><p><b>substance</b>: id: ingr2; Clavulanate potassium (substance) <span>(Details : {SNOMED CT code '395938000' = 'Clavulanate potassium', given as 'Clavulanate potassium (substance)'})</span></p></blockquote></div>"
          },
          "contained": [
           {
            "resourceType": "Substance",
            "id": "ingr1",
            "code": {
             "coding": [
              {
               "system": "http://snomed.info/sct",
               "code": "372687004",
               "display": "Amoxicillin (substance)"
              }
             ]
            }
           },
           {
            "resourceType": "Substance",
            "id": "ingr2",
            "code": {
             "coding": [
              {
               "system": "http://snomed.info/sct",
               "code": "395938000",
               "display": "Clavulanate potassium (substance)"
              }
             ]
            }
           }
          ],
          "category": [
           {
            "coding": [
             {
              "system": "http://terminology.hl7.org/CodeSystem/substance-category",
              "code": "drug",
              "display": "Drug or Medicament"
             }
            ]
           }
          ],
          "code": {
           "coding": [
            {
             "system": "http://snomed.info/sct",
             "code": "392259005",
             "display": "Amoxicillin + clavulanate potassium 875mg/125mg tablet (product)"
            }
           ]
          },
          "description": "Augmentin 875",
          "ingredient": [
           {
            "quantity": {
             "numerator": {
              "value": 875,
              "unit": "mg",
              "system": "http://unitsofmeasure.org",
              "code": "mg"
             },
             "denominator": {
              "value": 1000,
              "unit": "mg",
              "system": "http://unitsofmeasure.org",
              "code": "mg"
             }
            },
            "substanceReference": {
             "reference": "#ingr1"
            }
           },
           {
            "quantity": {
             "numerator": {
              "value": 125,
              "unit": "mg",
              "system": "http://unitsofmeasure.org",
              "code": "mg"
             },
             "denominator": {
              "value": 1000,
              "unit": "mg",
              "system": "http://unitsofmeasure.org",
              "code": "mg"
             }
            },
            "substanceReference": {
             "reference": "#ingr2"
            }
           }
          ],
          "meta": {
           "tag": [
            {
             "system": "http://terminology.hl7.org/CodeSystem/v3-ActReason",
             "code": "HTEST",
             "display": "test health data"
            }
           ]
          }
         }
        },
        "substance-example-f201-dust.json": {
         "value": {
          "resourceType": "Substance",
          "id": "f201",
          "text": {
           "status": "generated",
           "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><p><b>Generated Narrative with Details</b></p><p><b>id</b>: f201</p><p><b>code</b>: House dust allergen <span>(Details : {SNOMED CT code '406466009' = 'House dust allergen', given as 'House dust allergen'})</span></p></div>"
          },
          "code": {
           "coding": [
            {
             "system": "http://snomed.info/sct",
             "code": "406466009",
             "display": "House dust allergen"
            }
           ]
          },
          "meta": {
           "tag": [
            {
             "system": "http://terminology.hl7.org/CodeSystem/v3-ActReason",
             "code": "HTEST",
             "display": "test health data"
            }
           ]
          }
         }
        },
        "substance-example-f202-staphylococcus.json": {
         "value": {
          "resourceType": "Substance",
          "id": "f202",
          "text": {
           "status": "generated",
           "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><p><b>Generated Narrative with Details</b></p><p><b>id</b>: f202</p><p><b>code</b>: Staphylococcus Aureus <span>(Details : {SNOMED CT code '3092008' = 'Staphylococcus aureus', given as 'Staphylococcus Aureus'})</span></p></div>"
          },
          "code": {
           "coding": [
            {
             "system": "http://snomed.info/sct",
             "code": "3092008",
             "display": "Staphylococcus Aureus"
            }
           ]
          },
          "meta": {
           "tag": [
            {
             "system": "http://terminology.hl7.org/CodeSystem/v3-ActReason",
             "code": "HTEST",
             "display": "test health data"
            }
           ]
          }
         }
        },
        "substance-example-f203-potassium.json": {
         "value": {
          "resourceType": "Substance",
          "id": "f203",
          "text": {
           "status": "generated",
           "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><p><b>Generated Narrative with Details</b></p><p><b>id</b>: f203</p><p><b>identifier</b>: 1234</p><p><b>category</b>: Chemical <span>(Details : {http://terminology.hl7.org/CodeSystem/substance-category code 'chemical' = 'Chemical', given as 'Chemical'})</span></p><p><b>code</b>: Potassium <span>(Details : {SNOMED CT code '88480006' = 'Potassium', given as 'Potassium'})</span></p></div>"
          },
          "identifier": [
           {
            "system": "http://acme.org/identifiers/substances",
            "value": "1234"
           }
          ],
          "category": [
           {
            "coding": [
             {
              "system": "http://terminology.hl7.org/CodeSystem/substance-category",
              "code": "chemical",
              "display": "Chemical"
             }
            ]
           }
          ],
          "code": {
           "coding": [
            {
             "system": "http://snomed.info/sct",
             "code": "88480006",
             "display": "Potassium"
            }
           ]
          },
          "meta": {
           "tag": [
            {
             "system": "http://terminology.hl7.org/CodeSystem/v3-ActReason",
             "code": "HTEST",
             "display": "test health data"
            }
           ]
          }
         }
        },
        "substance-example-silver-nitrate-product.json": {
         "value": {
          "resourceType": "Substance",
          "id": "f204",
          "text": {
           "status": "generated",
           "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><p><b>Generated Narrative with Details</b></p><p><b>id</b>: f204</p><p><b>identifier</b>: 15970</p><p><b>category</b>: Chemical <span>(Details : {http://terminology.hl7.org/CodeSystem/substance-category code 'chemical' = 'Chemical', given as 'Chemical'})</span></p><p><b>code</b>: Silver nitrate 20% solution (product) <span>(Details : {SNOMED CT code '333346007' = 'Silver nitrate 20% solution', given as 'Silver nitrate 20% solution (product)'})</span></p><p><b>description</b>: Solution for silver nitrate stain</p><h3>Instances</h3><table><tr><td>-</td><td><b>Identifier</b></td><td><b>Expiry</b></td><td><b>Quantity</b></td></tr><tr><td>*</td><td>AB94687</td><td>01/01/2018</td><td>100 mL<span> (Details: UCUM code mL = 'mL')</span></td></tr></table></div>"
          },
          "identifier": [
           {
            "system": "http://acme.org/identifiers/substances",
            "value": "15970"
           }
          ],
          "category": [
           {
            "coding": [
             {
              "system": "http://terminology.hl7.org/CodeSystem/substance-category",
              "code": "chemical",
              "display": "Chemical"
             }
            ]
           }
          ],
          "code": {
           "coding": [
            {
             "system": "http://snomed.info/sct",
             "code": "333346007",
             "display": "Silver nitrate 20% solution (product)"
            }
           ]
          },
          "description": "Solution for silver nitrate stain",
          "instance": [
           {
            "identifier": {
             "system": "http://acme.org/identifiers/substances/lot",
             "value": "AB94687"
            },
            "expiry": "2018-01-01",
            "quantity": {
             "value": 100,
             "unit": "mL",
             "system": "http://unitsofmeasure.org",
             "code": "mL"
            }
           }
          ],
          "meta": {
           "tag": [
            {
             "system": "http://terminology.hl7.org/CodeSystem/v3-ActReason",
             "code": "HTEST",
             "display": "test health data"
            }
           ]
          }
         }
        },
        "substance-example.json": {
         "value": {
          "resourceType": "Substance",
          "id": "example",
          "text": {
           "status": "generated",
           "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><p><b>Generated Narrative with Details</b></p><p><b>id</b>: example</p><p><b>identifier</b>: 1463</p><p><b>status</b>: active</p><p><b>category</b>: Allergen <span>(Details : {http://terminology.hl7.org/CodeSystem/substance-category code 'allergen' = 'Allergen', given as 'Allergen'})</span></p><p><b>code</b>: apitoxin (Honey Bee Venom) <span>(Details )</span></p></div>"
          },
          "identifier": [
           {
            "system": "http://acme.org/identifiers/substances",
            "value": "1463"
           }
          ],
          "status": "active",
          "category": [
           {
            "coding": [
             {
              "system": "http://terminology.hl7.org/CodeSystem/substance-category",
              "code": "allergen",
              "display": "Allergen"
             }
            ]
           }
          ],
          "code": {
           "text": "apitoxin (Honey Bee Venom)"
          },
          "meta": {
           "tag": [
            {
             "system": "http://terminology.hl7.org/CodeSystem/v3-ActReason",
             "code": "HTEST",
             "display": "test health data"
            }
           ]
          }
         }
        }
       }
      }
     }
    }
   },
   "get": {
    "tags": [
     "Substance"
    ],
    "parameters": [
     {
      "name": "category",
      "in": "query",
      "schema": {
       "type": "string"
      },
      "description": "product-problem | product-quality | product-use-error | wrong-dose | incorrect-prescribing-information | wrong-technique | wrong-route-of-administration | wrong-rate | wrong-duration | wrong-time | expired-drug | medical-device-use-error | problem-different-manufacturer | unsafe-physical-environment"
     },
     {
      "name": "code",
      "in": "query",
      "schema": {
       "type": "string"
      },
      "description": ""
     },
     {
      "name": "container-identifier",
      "in": "query",
      "schema": {
       "type": "string"
      },
      "description": "Identifier of the package/container"
     },
     {
      "name": "expiry",
      "in": "query",
      "schema": {
       "type": "string",
       "format": "date"
      },
      "description": "Expiry date of package or container of substance"
     },
     {
      "name": "identifier",
      "in": "query",
      "schema": {
       "type": "string"
      },
      "description": "Account number"
     },
     {
      "name": "quantity",
      "in": "query",
      "schema": {
       "type": "integer"
      },
      "description": "Quantity of which the charge item has been serviced"
     },
     {
      "name": "status",
      "in": "query",
      "schema": {
       "type": "string"
      },
      "description": "active | inactive | entered-in-error | on-hold | unknown"
     },
     {
      "name": "substance-reference",
      "in": "query",
      "schema": {
       "type": "string"
      },
      "description": "A component of the substance"
     },
     {
      "name": "_format",
      "in": "query",
      "x-consoleDefault": "application/json",
      "schema": {
       "type": "string"
      },
      "description": ""
     }
    ],
    "responses": {
     "200": {
      "description": "Success",
      "content": {
       "application/fhir+json": {
        "schema": {
         "type": "array",
         "items": {
          "$ref": "#/components/schemas/Substance"
         }
        }
       }
      }
     }
    }
   }
  },
  "/Substance/{id}": {
   "parameters": [
    {
     "in": "path",
     "required": true,
     "name": "id",
     "schema": {
      "type": "string"
     }
    }
   ],
   "get": {
    "tags": [
     "Substance"
    ],
    "parameters": [],
    "responses": {
     "200": {
      "description": "Success",
      "content": {
       "application/fhir+json": {
        "schema": {
         "$ref": "#/components/schemas/Substance"
        }
       }
      }
     }
    }
   },
   "put": {
    "tags": [
     "Substance"
    ],
    "responses": {
     "200": {
      "description": "Success",
      "content": {}
     }
    },
    "requestBody": {
     "content": {
      "application/fhir+json": {
       "schema": {
        "$ref": "#/components/schemas/Substance"
       }
      }
     }
    }
   },
   "delete": {
    "tags": [
     "Substance"
    ],
    "parameters": [],
    "responses": {
     "200": {
      "description": "Success",
      "content": {}
     }
    }
   }
  },
  "/Substance/{id}/_history": {
   "get": {
    "tags": [
     "Substance"
    ],
    "parameters": [
     {
      "name": "id",
      "in": "path",
      "required": true,
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "_count",
      "in": "query",
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "_since",
      "in": "query",
      "schema": {
       "type": "string"
      }
     }
    ],
    "responses": {
     "200": {
      "description": "Success",
      "content": {
       "application/fhir+json": {
        "schema": {
         "type": "array",
         "items": {
          "$ref": "#/components/schemas/Substance"
         }
        }
       }
      }
     }
    }
   }
  },
  "/Substance/{id}/_history/{vid}": {
   "get": {
    "tags": [
     "Substance"
    ],
    "parameters": [
     {
      "name": "id",
      "in": "path",
      "required": true,
      "schema": {
       "type": "string"
      }
     },
     {
      "name": "vid",
      "in": "path",
      "required": true,
      "schema": {
       "type": "string"
      }
     }
    ],
    "responses": {
     "200": {
      "description": "Success",
      "content": {
       "application/fhir+json": {
        "schema": {
         "$ref": "#/components/schemas/Substance"
        }
       }
      }
     }
    }
   }
  }
 },
 "tags": [
  {
   "name": "Substance"
  }
 ]
}